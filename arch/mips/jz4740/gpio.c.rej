***************
*** 18,24 ****
  #include <linux/init.h>
  
  #include <linux/spinlock.h>
- #include <linux/sysdev.h>
  #include <linux/io.h>
  #include <linux/gpio.h>
  #include <linux/delay.h>
--- 18,24 ----
  #include <linux/init.h>
  
  #include <linux/spinlock.h>
+ #include <linux/syscore_ops.h>
  #include <linux/io.h>
  #include <linux/gpio.h>
  #include <linux/delay.h>
***************
*** 86,92 ****
  	spinlock_t lock;
  
  	struct gpio_chip gpio_chip;
- 	struct sys_device sysdev;
  };
  
  static struct jz_gpio_chip jz4740_gpio_chips[];
--- 86,91 ----
  	spinlock_t lock;
  
  	struct gpio_chip gpio_chip;
  };
  
  static struct jz_gpio_chip jz4740_gpio_chips[];
***************
*** 459,507 ****
  	JZ4740_GPIO_CHIP(D),
  };
  
- static inline struct jz_gpio_chip *sysdev_to_chip(struct sys_device *dev)
  {
- 	return container_of(dev, struct jz_gpio_chip, sysdev);
  }
  
- static int jz4740_gpio_suspend(struct sys_device *dev, pm_message_t state)
  {
- 	struct jz_gpio_chip *chip = sysdev_to_chip(dev);
  
- 	chip->suspend_mask = readl(chip->base + JZ_REG_GPIO_MASK);
- 	writel(~(chip->wakeup), chip->base + JZ_REG_GPIO_MASK_SET);
- 	writel(chip->wakeup, chip->base + JZ_REG_GPIO_MASK_CLEAR);
  
  	return 0;
  }
  
- static int jz4740_gpio_resume(struct sys_device *dev)
  {
- 	struct jz_gpio_chip *chip = sysdev_to_chip(dev);
  	uint32_t mask = chip->suspend_mask;
  
  	writel(~mask, chip->base + JZ_REG_GPIO_MASK_CLEAR);
  	writel(mask, chip->base + JZ_REG_GPIO_MASK_SET);
  
- 	return 0;
  }
  
- static struct sysdev_class jz4740_gpio_sysdev_class = {
- 	.name = "gpio",
  	.suspend = jz4740_gpio_suspend,
  	.resume = jz4740_gpio_resume,
  };
  
- static int jz4740_gpio_chip_init(struct jz_gpio_chip *chip, unsigned int id)
  {
- 	int ret, irq;
- 
- 	chip->sysdev.id = id;
- 	chip->sysdev.cls = &jz4740_gpio_sysdev_class;
- 	ret = sysdev_register(&chip->sysdev);
- 
- 	if (ret)
- 		return ret;
  
  	spin_lock_init(&chip->lock);
  
--- 458,504 ----
  	JZ4740_GPIO_CHIP(D),
  };
  
+ static void jz4740_gpio_suspend_chip(struct jz_gpio_chip *chip)
  {
+ 	chip->suspend_mask = readl(chip->base + JZ_REG_GPIO_MASK);
+ 	writel(~(chip->wakeup), chip->base + JZ_REG_GPIO_MASK_SET);
+ 	writel(chip->wakeup, chip->base + JZ_REG_GPIO_MASK_CLEAR);
  }
  
+ static int jz4740_gpio_suspend(void)
  {
+ 	int i;
  
+ 	for (i = 0; i < ARRAY_SIZE(jz4740_gpio_chips); i++)
+ 		jz4740_gpio_suspend_chip(&jz4740_gpio_chips[i]);
  
  	return 0;
  }
  
+ static void jz4740_gpio_resume_chip(struct jz_gpio_chip *chip)
  {
  	uint32_t mask = chip->suspend_mask;
  
  	writel(~mask, chip->base + JZ_REG_GPIO_MASK_CLEAR);
  	writel(mask, chip->base + JZ_REG_GPIO_MASK_SET);
+ }
  
+ static void jz4740_gpio_resume(void)
+ {
+ 	int i;
+ 
+ 	for (i = ARRAY_SIZE(jz4740_gpio_chips) - 1; i >= 0 ; i--)
+ 		jz4740_gpio_resume_chip(&jz4740_gpio_chips[i]);
  }
  
+ static struct syscore_ops jz4740_gpio_syscore_ops = {
  	.suspend = jz4740_gpio_suspend,
  	.resume = jz4740_gpio_resume,
  };
  
+ static void jz4740_gpio_chip_init(struct jz_gpio_chip *chip, unsigned int id)
  {
+ 	int irq;
  
  	spin_lock_init(&chip->lock);
  
***************
*** 519,540 ****
  		irq_set_chip_and_handler(irq, &jz_gpio_irq_chip,
  					 handle_level_irq);
  	}
- 
- 	return 0;
  }
  
  static int __init jz4740_gpio_init(void)
  {
  	unsigned int i;
- 	int ret;
- 
- 	ret = sysdev_class_register(&jz4740_gpio_sysdev_class);
- 	if (ret)
- 		return ret;
  
  	for (i = 0; i < ARRAY_SIZE(jz4740_gpio_chips); ++i)
  		jz4740_gpio_chip_init(&jz4740_gpio_chips[i], i);
  
  	printk(KERN_INFO "JZ4740 GPIO initialized\n");
  
  	return 0;
--- 516,532 ----
  		irq_set_chip_and_handler(irq, &jz_gpio_irq_chip,
  					 handle_level_irq);
  	}
  }
  
  static int __init jz4740_gpio_init(void)
  {
  	unsigned int i;
  
  	for (i = 0; i < ARRAY_SIZE(jz4740_gpio_chips); ++i)
  		jz4740_gpio_chip_init(&jz4740_gpio_chips[i], i);
  
+ 	register_syscore_ops(&jz4740_gpio_syscore_ops);
+ 
  	printk(KERN_INFO "JZ4740 GPIO initialized\n");
  
  	return 0;
