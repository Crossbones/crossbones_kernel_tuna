***************
*** 25,41 ****
  
  #ifdef CONFIG_SMP
  
- #define __futex_atomic_op(insn, ret, oldval, uaddr, oparg)	\
  	smp_mb();						\
  	__asm__ __volatile__(					\
- 	"1:	ldrex	%1, [%2]\n"				\
  	"	" insn "\n"					\
- 	"2:	strex	%1, %0, [%2]\n"				\
- 	"	teq	%1, #0\n"				\
  	"	bne	1b\n"					\
  	"	mov	%0, #0\n"				\
- 	__futex_atomic_ex_table("%4")				\
- 	: "=&r" (ret), "=&r" (oldval)				\
  	: "r" (uaddr), "r" (oparg), "Ir" (-EFAULT)		\
  	: "cc", "memory")
  
--- 25,41 ----
  
  #ifdef CONFIG_SMP
  
+ #define __futex_atomic_op(insn, ret, oldval, tmp, uaddr, oparg)	\
  	smp_mb();						\
  	__asm__ __volatile__(					\
+ 	"1:	ldrex	%1, [%3]\n"				\
  	"	" insn "\n"					\
+ 	"2:	strex	%2, %0, [%3]\n"				\
+ 	"	teq	%2, #0\n"				\
  	"	bne	1b\n"					\
  	"	mov	%0, #0\n"				\
+ 	__futex_atomic_ex_table("%5")				\
+ 	: "=&r" (ret), "=&r" (oldval), "=&r" (tmp)		\
  	: "r" (uaddr), "r" (oparg), "Ir" (-EFAULT)		\
  	: "cc", "memory")
  
***************
*** 73,86 ****
  #include <linux/preempt.h>
  #include <asm/domain.h>
  
- #define __futex_atomic_op(insn, ret, oldval, uaddr, oparg)	\
  	__asm__ __volatile__(					\
- 	"1:	" T(ldr) "	%1, [%2]\n"			\
  	"	" insn "\n"					\
- 	"2:	" T(str) "	%0, [%2]\n"			\
  	"	mov	%0, #0\n"				\
- 	__futex_atomic_ex_table("%4")				\
- 	: "=&r" (ret), "=&r" (oldval)				\
  	: "r" (uaddr), "r" (oparg), "Ir" (-EFAULT)		\
  	: "cc", "memory")
  
--- 73,86 ----
  #include <linux/preempt.h>
  #include <asm/domain.h>
  
+ #define __futex_atomic_op(insn, ret, oldval, tmp, uaddr, oparg)	\
  	__asm__ __volatile__(					\
+ 	"1:	" T(ldr) "	%1, [%3]\n"			\
  	"	" insn "\n"					\
+ 	"2:	" T(str) "	%0, [%3]\n"			\
  	"	mov	%0, #0\n"				\
+ 	__futex_atomic_ex_table("%5")				\
+ 	: "=&r" (ret), "=&r" (oldval), "=&r" (tmp)		\
  	: "r" (uaddr), "r" (oparg), "Ir" (-EFAULT)		\
  	: "cc", "memory")
  
***************
*** 117,123 ****
  	int cmp = (encoded_op >> 24) & 15;
  	int oparg = (encoded_op << 8) >> 20;
  	int cmparg = (encoded_op << 20) >> 20;
- 	int oldval = 0, ret;
  
  	if (encoded_op & (FUTEX_OP_OPARG_SHIFT << 28))
  		oparg = 1 << oparg;
--- 117,123 ----
  	int cmp = (encoded_op >> 24) & 15;
  	int oparg = (encoded_op << 8) >> 20;
  	int cmparg = (encoded_op << 20) >> 20;
+ 	int oldval = 0, ret, tmp;
  
  	if (encoded_op & (FUTEX_OP_OPARG_SHIFT << 28))
  		oparg = 1 << oparg;
***************
*** 129,147 ****
  
  	switch (op) {
  	case FUTEX_OP_SET:
- 		__futex_atomic_op("mov	%0, %3", ret, oldval, uaddr, oparg);
  		break;
  	case FUTEX_OP_ADD:
- 		__futex_atomic_op("add	%0, %1, %3", ret, oldval, uaddr, oparg);
  		break;
  	case FUTEX_OP_OR:
- 		__futex_atomic_op("orr	%0, %1, %3", ret, oldval, uaddr, oparg);
  		break;
  	case FUTEX_OP_ANDN:
- 		__futex_atomic_op("and	%0, %1, %3", ret, oldval, uaddr, ~oparg);
  		break;
  	case FUTEX_OP_XOR:
- 		__futex_atomic_op("eor	%0, %1, %3", ret, oldval, uaddr, oparg);
  		break;
  	default:
  		ret = -ENOSYS;
--- 129,147 ----
  
  	switch (op) {
  	case FUTEX_OP_SET:
+ 		__futex_atomic_op("mov	%0, %4", ret, oldval, tmp, uaddr, oparg);
  		break;
  	case FUTEX_OP_ADD:
+ 		__futex_atomic_op("add	%0, %1, %4", ret, oldval, tmp, uaddr, oparg);
  		break;
  	case FUTEX_OP_OR:
+ 		__futex_atomic_op("orr	%0, %1, %4", ret, oldval, tmp, uaddr, oparg);
  		break;
  	case FUTEX_OP_ANDN:
+ 		__futex_atomic_op("and	%0, %1, %4", ret, oldval, tmp, uaddr, ~oparg);
  		break;
  	case FUTEX_OP_XOR:
+ 		__futex_atomic_op("eor	%0, %1, %4", ret, oldval, tmp, uaddr, oparg);
  		break;
  	default:
  		ret = -ENOSYS;
